// The most common minimum age to vote is 18.Write a function canIVote() that takes in a number, 
// representing the person’s age, and returns the boolean true if they are 18 years old or older,and the boolean false if they are not.
const canIVote=(year)=>year>=18?true:false
// Uncomment the line below when you're ready to try out your function
console.log(canIVote(19)) // Should print true

// Write a function, agreeOrDisagree(), that takes in two strings, and returns 'You agree!'
// if the two strings are the same and 'You disagree!' if the two strings are different.
const agreeOrDisagree=(str1,str2)=>{
    if(str1===str2){
        return('You agree!')
    }else{
        return('You disagree!')
    }
}
console.log(agreeOrDisagree("yep", "yep")) 

// Write a function, lifePhase(), that takes in a person’s age, as a number, and returns which phase of life they are in.
// Here are the classifications:
// 0-3 should return 'baby'
// 4-12 should return 'child'
// 13-19 should return 'teen'
// 20-64 should return 'adult'
// 65-140 should return 'senior citizen'
// If the number is less than 0 or greater than 140, the program should return 'This is not a valid age'

const lifePhase=(age)=>{
    if(age>=0 && age<=3){
        return 'baby'
    }else if(age>=4 && age<=12){
        return 'child'
    }else if(age>=13 && age<=19){
        return 'teen'
    }else if(age>=20 && age<=64){
        return 'adult'
    }else if(age>=65 && age<=140){
        return 'citizen'
    }else if(age<0 || age>140){
        return 'this is not a valid age'
    }
}
console.log(lifePhase(4424))

// Write a function, finalGrade(). It should:
// take three arguments of type number
// find the average of those three numbers
// return the letter grade (as a string) that the average corresponds to
// return ‘You have entered an invalid grade.’ if any of the three grades are less than 0 or greater than 100
// 0-59 should return: 'F'
// 60-69 should return: 'D'
// 70-79 should return: 'C'
// 80-89 should return: 'B'
// 90-100 should return: 'A'

const finalGrade=(n1,n2,n3)=>{
    let avg=(n1+n2+n3)/3
    if(n1<0){
       return'You have entered an invalid grade.'
    }else if(n2<0){
        return'You have entered an invalid grade.'
    }else if(n3<0){
        return'You have entered an invalid grade.'    
    }else if(n1>100){
        return'You have entered an invalid grade.'
    }else if(n2>100){
        return'You have entered an invalid grade.'
    }else if(n3>100){
        return'You have entered an invalid grade.'
    }else if(avg>=0 && avg<=59){
        return'F'
    }else if(avg>=60&& avg<=69){
        return'D'
    }else if(avg>=70&& avg<=79){
        return'C'
    }else if(avg>=80&& avg<=89){
        return'B'
    }else if(avg>=90&& avg<=100){
        return'A'
    }
}
console.log(finalGrade(33, 77, 195))

// Write a function, reportingForDuty(), that has two string parameters, 
// rank and lastName, and returns a string in the following format: ‘rank lastName reporting for duty!’

//reportingForDuty('Private', 'Fido') 
// Should return 'Private Fido reporting for duty!

const reportingForDuty=(rank,lastName)=>{
    return(`${rank} ${lastName} reporting for duty!`)
}

// We wrote a function, rollTheDice(), which is supposed to simulate two dice being rolled and totalled. 
// It’s close to doing what we want, but there’s something not quite right. Can you fix our code, please?
//Math.random() gives us a random number from 0 up to, but not including, 1
// We multiplied that by 6 to get a number between 0 and up to, but not including, 6
// But since we actually wanted numbers from 1 to 6, inclusive, we added 1

const rollTheDice=()=>{
    let die1 = Math.random() * 6 + 1
    let die2 = Math.random() * 6 + 1
    return Math.floor(die1 + die2)
}
console.log(rollTheDice())

// Though an object’s mass remains consistent throughout the universe, 
// weight is determined by the force of gravity on an object. Since different planets have different gravity,
// the same object would weigh different amounts on each of those planets! Cool, huh?
// Write a function, calculateWeight(). It should:
// have two parameters: earthWeight and planet
// expect earthWeight to be a number
// expect planet to be a string
// return a number representing what that Earth-weight would equate to on the planet passed in.
// Handle the following cases:
// 'Mercury' weight = earthWeight * 0.378
// 'Venus' weight = earthWeight * 0.907
// 'Mars' weight = earthWeight * 0.377
// 'Jupiter' weight = earthWeight * 2.36
// 'Saturn' weight = earthWeight * 0.916
// For all other inputs, return 'Invalid Planet Entry. Try: Mercury, Venus, Mars, Jupiter, or Saturn.'

const calculateWeight=(earthWeight,planet)=>{
    if(planet==='Mercury'){
        return(earthWeight*0.378)
    }else if(planet==='Venus'){
        return(earthWeight*0.907)
    }else if(planet==='Mars'){
        return(earthWeight*0.377)
    }else if(planet==='Jupiter'){
        return(earthWeight*2.36)
    }else if(planet==='Saturn'){
        return(earthWeight*0.916)
    }else{
        return 'Invalid Planet Entry. Try: Mercury, Venus, Mars, Jupiter, or Saturn.'
    }
}
console.log(calculateWeight(100, 'Jupiter'))

// It can be hard to keep track of what’s truthy or falsy in JavaScript. Write a function,
// truthyOrFalsy(), that takes in any value and returns true if that value is truthy and false if that value is falsy.
const truthyOrFalsy=(check)=>check? console.log(true):console.log(false)
truthyOrFalsy(0)

// A person’s number of imaginary friends are always 25% (or 1/4) of their total friends.
// Write a function, numImaginaryFriends(), that takes in the total number of friends a person has and returns the number of imaginary friends they have.
// Since friends can only come in whole numbers, be sure to round your result up to the nearest whole number before returning it.
// The JavaScript Math.ceil() function will come in handy. Check out the documentation here to figure out how it works.

const numImaginaryFriends=(num)=>{
    return Math.ceil(num*.25)  //Math.ceil() redondea un numero hacia arriba. sin importar si es menor a 0.5
}

console.log(numImaginaryFriends(55))

// Write a function, sillySentence(), that has 3 string parameters and returns the
// following silly sentence with the blanks filled in by the arguments passed into the function:
// I am so excited because I love coding! Time to write some more awesome functions!

const sillySentence=(adj,verb,pron)=> {
    return `I am so ${adj} because I ${verb} coding! Time to write some more awesome ${pron}!`
}


// Create a function, tipCalculator(), that has two parameters, 
// a string representing the quality of the service received and a number representing the total cost.
// Return the tip, as a number, based on the following:
// ‘bad’ should return a 5% tip
// ‘ok’ should return a 15% tip
// ‘good’ should return a 20% tip
// ‘excellent’ should return a 30% tip
// all other inputs should default to 18%

const tipCalculator=(quality,total)=>{
    switch (quality){
        case 'bad':
            return total*0.05;
            break;
        case 'ok':
            return total*.15;
            break;
        case 'good':
            return total*.2;
            break;
        case 'excellent':
            return total*.3;
            break;
        default:
            return total*.18;
            break;
    }
}
console.log(tipCalculator('good',100))


// Write a function, toEmoticon(), that takes in a string and returns the corresponding emoticon as a string. 
// Use a switch/case, and cover these cases:
// 'shrug' should return '|_{"}_|'
// 'smiley face' should return ':)'
// 'frowny face' should return':('
// 'winky face' should return ';)'
// 'heart' should return '<3'
// any other input should return '|_(* ~ *)_|'

    const toEmoticon=word=>{
        switch (word){
            case 'shrug':
                return '|_{"}_|';
                break;
            case 'smiley':
                return ':)';
                break;
            case 'frowny':
                return ':(';
                break;
            case 'winky':
                return ';)';
                break;
            case 'heart':
                return '<3';
                break;
            default:
                return '|_(* ~ *)_|';
                break;
        }
    }
console.log(toEmoticon("whatever")) 

// Create a function numberDigits() that takes the variable x as its only parameter.
// If the variable x is between 0 and 9, return the string 'One digit: N', where N is the value of x. 
//For example, numberDigits(5) would return:
// 'One digit: 5'
// If the variable x is between 10 and 99, return the string 'Two digits: N', where N is the value of x. 
//For example, numberDigits(12) would output:
// 'Two digits: 12'
// Any other value of x, including negative numbers, return the string 'The number is: N', where N is the value of x. 
//For example, numberDigits(-202) would output:
// 'The number is: -202'
// Feel free to test out your code below the function definition.
 
const numberDigits=x=>{
    if(x>0 && x<=9){
        return (`One digit:${x}`)
    }else if(x>=10 && x<=99){
        return(`Two digits: ${x}`)
    }else{
        return(`The number is:${x}`)
    }
}
console.log(numberDigits(919))